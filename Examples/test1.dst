start{
    array <integer, 10> arr is [1,2,3,4,5,6,7,8,9,10];
    integer i is 0;
    loopif(i<10){
        if(arr[i] equals 2){
            show("It is 2\n");
        }elif(arr[i] equals 5){
            show("It is 5\n");
        }else{
            show("A simple integer\n");
        }
        i is i + 1;
    }
}

ShowVStack();
	generateCode(p->child_node[0], level + 1);	// Expression
	generateCode(p->child_node[1], level + 1);	// Operator
	printf("Expression1\n");
	generateCode(p->child_node[2], level + 1);	// Value
	printf("Expression2\n");
	ShowVStack();
	struct Symbol* lhs = popV();
	struct Symbol* op = popV();
	struct Symbol* val = popV();
	printf("******************************************%s:%d\n",lhs->name,lhs->value.ivalue);
	printf("******************************************%s:%d\n",op->name,op->value.ivalue);
	printf("******************************************%s:%d\n",val->name,val->value.ivalue);
	struct Symbol* sym = (struct Symbol *)malloc(sizeof(struct Symbol));;
	if(strcmp(op->name,"astAdd")==0){
		sym->value.ivalue = lhs->value.ivalue + val->value.ivalue;
		sym->asmclass = 'r';
		int l;
		int r;
		switch (lhs->asmclass){
			case 'm':
				l = freeregister();
				fprintf(asmCode, "    lw $%d, %d($fp)\n",l, lhs->asm_location);
				registers[l-2] = 1;
				lhs->reg = l;
				switch (val->asmclass){
					case 'm':
						r = freeregister();
						fprintf(asmCode, "    lw $%d, %d($fp)\n",r, val->asm_location);
						registers[r-2] = 1;
						val->reg = r;
						fprintf(asmCode, "   addu $%d, $%d, $%d\n",l,r,l);
						sym->reg = l;
					break;
					case 'c':
						fprintf(asmCode, "  addu $%d, $%d, %d\n",l,l,val->value.ivalue);
						sym->reg = l;
					break;
					case 'r':
					// No idea if this case is possible.
						fprintf(asmCode, "    add  eax, [REG_INT]\n");
					break;
					case 's':
						printf("IMPOSSIBLE ('m'-'s')\n");
					break;
				}	
			break;
			case 'c':
				switch (val->asmclass){
					case 'm':
						r = freeregister();
						fprintf(asmCode, "    lw $%d, %d($fp)\n",r, val->asm_location);
						registers[r-2] = 1;
						val->reg = r;
						fprintf(asmCode, "  addu $%d, $%d, %d\n",r,r,lhs->value.ivalue);
						sym->reg = r;
					break;
					case 'c':
						sym->value.ivalue = lhs->value.ivalue + val->value.ivalue;
						sym->asmclass='c';
					break;
					case 'r':
					// No idea if this case is possible
						fprintf(asmCode, "    mov  eax, %d\n", lhs->value.ivalue);
						fprintf(asmCode, "    add  eax, [REG_INT]\n");
					break;
					case 's':
						printf("IMPOSSIBLE (CONSTANT-STACK)\n");
					break;
				}
			break;
		}
	}
	else if(strcmp(op->name,"astMul")==0){
		sym->value.ivalue = lhs->value.ivalue * val->value.ivalue;
		sym->asmclass = 'r';
		int l;
		int r;
		switch (lhs->asmclass){
			case 'm':
				l = freeregister();
				fprintf(asmCode, "    lw $%d, %d($fp)\n",l, lhs->asm_location);
				registers[l-2] = 1;
				lhs->reg = l;
				switch (val->asmclass){
					case 'm':
						r = freeregister();
						fprintf(asmCode, "    lw $%d, %d($fp)\n",r, val->asm_location);
						registers[r-2] = 1;
						val->reg = r;
						fprintf(asmCode, "    mult $%d, $%d\n",l,r);
						fprintf(asmCode, "    mflo $%d\n",r);
						sym->reg = r;
					break;
					case 'c':
						r = freeregister();
						fprintf(asmCode, "    li $%d, %d\n",r, val->value.ivalue);
						registers[r-2] = 1;
						fprintf(asmCode, "    mult $%d, $%d\n",l,r);
						fprintf(asmCode, "    mflo $%d\n",r);
						sym->reg = r;
					break;
					case 'r':
					// No idea if this case is possible.
						fprintf(asmCode, "    add  eax, [REG_INT]\n");
					break;
					case 's':
						printf("IMPOSSIBLE ('m'-'s')\n");
					break;
				}	
			break;
			case 'c':
				switch (val->asmclass){
					case 'm':
						r = freeregister();
						fprintf(asmCode, "    lw $%d, %d($fp)\n",r, val->asm_location);
						registers[r-2] = 1;
						val->reg = r;
						l = freeregister();
						fprintf(asmCode, "    li $%d, %d\n",l, val->value.ivalue);
						fprintf(asmCode, "    mult $%d, $%d\n",l,r);
						fprintf(asmCode, "    mflo $%d\n",r);
						sym->reg = r;
					break;
					case 'c':
						sym->value.ivalue = lhs->value.ivalue * val->value.ivalue;
						sym->asmclass='c';
					break;
					case 'r':
					// No idea if this case is possible
						fprintf(asmCode, "    mov  eax, %d\n", lhs->value.ivalue);
						fprintf(asmCode, "    add  eax, [REG_INT]\n");
					break;
					case 's':
						printf("IMPOSSIBLE (CONSTANT-STACK)\n");
					break;
				}
			break;
		}
	}
	else if(strcmp(op->name,"astSub")==0){
		sym->value.ivalue = lhs->value.ivalue - val->value.ivalue;
		sym->asmclass = 'r';
		int l;
		int r;
		switch (lhs->asmclass){
			case 'm':
				l = freeregister();
				fprintf(asmCode, "    lw $%d, %d($fp)\n",l, lhs->asm_location);
				registers[l-2] = 1;
				lhs->reg = l;
				switch (val->asmclass){
					case 'm':
						r = freeregister();
						fprintf(asmCode, "    lw $%d, %d($fp)\n",r, val->asm_location);
						registers[r-2] = 1;
						val->reg = r;
						fprintf(asmCode, "    subu $%d, $%d, $%d\n",l,r,l);
						sym->reg = l;
					break;
					case 'c':
						fprintf(asmCode, "    subu $%d, $%d, %d\n",l,l,val->value.ivalue);
						sym->reg = l;
					break;
					case 'r':
					// No idea if this case is possible.
						fprintf(asmCode, "    add  eax, [REG_INT]\n");
					break;
					case 's':
						printf("IMPOSSIBLE ('m'-'s')\n");
					break;
				}	
			break;
			case 'c':
				switch (val->asmclass){
					case 'm':
						r = freeregister();
						fprintf(asmCode, "    lw $%d, %d($fp)\n",r, val->asm_location);
						registers[r-2] = 1;
						val->reg = r;
						fprintf(asmCode, "    subu $%d, $%d, %d\n",r,r,lhs->value.ivalue);
						sym->reg = r;
					break;
					case 'c':
						sym->value.ivalue = lhs->value.ivalue - val->value.ivalue;
						sym->asmclass='c';
					break;
					case 'r':
					// No idea if this case is possible
						fprintf(asmCode, "    mov  eax, %d\n", lhs->value.ivalue);
						fprintf(asmCode, "    add  eax, [REG_INT]\n");
					break;
					case 's':
						printf("IMPOSSIBLE (CONSTANT-STACK)\n");
					break;
				}
			break;
		}
	}
	// printf("Checking Operator type : %s\n",p->child_node[1]->symbol_node->asmclass);
	printf("----> %d\n",sym->value.ivalue);
	pushV(sym);